{"version":3,"sources":["mailIcon.js","PhoneIcon.js","App.js","serviceWorker.js","index.js","loading2.gif"],"names":["MailIcon","xmlns","height","viewBox","width","class","d","fill","App","useState","contactModal","setContactModal","className","src","logo","alt","onClick","isOpen","contentLabel","shouldCloseOnEsc","shouldCloseOnOverlayClick","shouldReturnFocusAfterClose","style","overlay","backgroundColor","content","color","display","justifyContent","alignItems","flexDirection","button","margin","closeTimeoutMS","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iSAEe,SAASA,IACtB,OACE,yBACEC,MAAM,6BACNC,OAAO,KACPC,QAAQ,YACRC,MAAM,KACNC,MAAM,SAEN,0BAAMC,EAAE,kHACR,0BAAMA,EAAE,gBAAgBC,KAAK,UCVpB,SAASP,IACtB,OACE,yBACEC,MAAM,6BACNC,OAAO,KACPC,QAAQ,YACRC,MAAM,KACNC,MAAM,SAEN,0BAAMC,EAAE,gBAAgBC,KAAK,SAC7B,0BAAMD,EAAE,sPC6ECE,MAjFf,WAAgB,IAAD,EAC2BC,oBAAS,GADpC,mBACNC,EADM,KACQC,EADR,KAGb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,gDACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4BAAQV,MAAM,kBAAkBW,QAAS,kBAAML,GAAgB,KAA/D,cAGA,kBAAC,IAAD,CACEM,OAAQP,EACRQ,aAAa,aACbC,kBAAkB,EAClBC,2BAA2B,EAC3BC,6BAA6B,EAC7BC,MAAO,CACLC,QAAS,CACPC,gBAAiB,UAEnBC,QAAS,CACPC,MAAO,SACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAEjBC,OAAQ,CACNC,OAAQ,UAGZC,eAAgB,KAEhB,wBAAI5B,MAAM,SAAV,eACA,yBAAKA,MAAM,kBACT,yBAAKA,MAAM,QACT,uBAAG6B,KAAM,mCACP,kBAAClC,EAAD,OAEF,wDAEF,yBAAKK,MAAM,QACT,uBAAG6B,KAAM,mBACP,kBAAC,EAAD,OAEF,+CAGJ,wBAAI7B,MAAM,SAAV,aACA,yBAAKA,MAAM,kBACT,yBAAKA,MAAM,QACT,uBAAG6B,KAAM,kCACP,kBAAClC,EAAD,OAEF,uDAEF,yBAAKK,MAAM,QACT,uBAAG6B,KAAM,mBACP,kBAAC,EAAD,OAEF,+CAGJ,6BACE,4BACElB,QAAS,WACPL,GAAgB,IAElBN,MAAM,mBAJR,aC9DQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.aefcaace.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function MailIcon() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"35\"\n      viewBox=\"0 0 24 24\"\n      width=\"35\"\n      class=\"icon1\"\n    >\n      <path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\" />\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n  );\n}\n","import React from \"react\";\n\nexport default function MailIcon() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"35\"\n      viewBox=\"0 0 24 24\"\n      width=\"35\"\n      class=\"icon1\"\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z\" />\n    </svg>\n  );\n}\n","import React, { useState } from \"react\";\nimport logo from \"./loading2.gif\";\nimport \"./App.scss\";\nimport ReactModal from \"react-modal\";\n\nimport MailIcon from \"./mailIcon\";\nimport PhoneIcon from \"./PhoneIcon\";\n\nfunction App() {\n  const [contactModal, setContactModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Veloci Trackers</h1>\n        <p>is Coming Soon...</p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button class=\"btn draw-border\" onClick={() => setContactModal(true)}>\n          Contact Us\n        </button>\n        <ReactModal\n          isOpen={contactModal}\n          contentLabel=\"Contact Us\"\n          shouldCloseOnEsc={true}\n          shouldCloseOnOverlayClick={true}\n          shouldReturnFocusAfterClose={true}\n          style={{\n            overlay: {\n              backgroundColor: \"282B34\"\n            },\n            content: {\n              color: \"282B34\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexDirection: \"column\"\n            },\n            button: {\n              margin: \"100px\"\n            }\n          }}\n          closeTimeoutMS={200}\n        >\n          <h1 class=\"names\">Chris Meyer</h1>\n          <div class=\"icon-container\">\n            <div class=\"icon\">\n              <a href={\"mailto:chris@velocitrackers.com\"}>\n                <MailIcon />\n              </a>\n              <p>chris@velocitrackers.com</p>\n            </div>\n            <div class=\"icon\">\n              <a href={\"tel:17194661016\"}>\n                <PhoneIcon />\n              </a>\n              <p>(719) 466-1016</p>\n            </div>\n          </div>\n          <h1 class=\"names\">Theo Bean</h1>\n          <div class=\"icon-container\">\n            <div class=\"icon\">\n              <a href={\"mailto:theo@velocitrackers.com\"}>\n                <MailIcon />\n              </a>\n              <p>theo@velocitrackers.com</p>\n            </div>\n            <div class=\"icon\">\n              <a href={\"tel:13378527322\"}>\n                <PhoneIcon />\n              </a>\n              <p>(337) 852-7322</p>\n            </div>\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                setContactModal(false);\n              }}\n              class=\"btn draw-border\"\n            >\n              Back\n            </button>\n          </div>\n        </ReactModal>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading2.84a9077d.gif\";"],"sourceRoot":""}